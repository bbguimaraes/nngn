local entity = require "nngn.lib.entity"
local map = require "nngn.lib.map"
local player = require "nngn.lib.player"

local entities = {}
local warps

local function init()
    -- warp
    warps = {}
    for _, t in ipairs({
        -- warps
        {{   0,  208}, { -32,  -16,  32,  16},  true, false},
        {{-208, -176}, { -16,  -16,  16,  16},  true, false},
        {{-272,  272}, { -16,  -16,  16,  16},  true, false},
        {{   0, -400}, {-352,  -16, 352,  16},  true, false},
        -- outer walls
        {{   0,  368}, {-192,  -16, 192,  16}, false, false},
        {{-368, -208}, { -16, -176,  16, 176}, false,  true},
        -- north rooms
        {{-208,  320}, { -16,  -32,  16,  32}, false,  true},
        {{-240,  268}, { -16,  -20,  16,  20}, false, false},
        {{ 256,  304}, { -32,  -16,  32,  16}, false, false},
        {{-304,  224}, { -16,  -32,  16,  32}, false,  true},
        {{-144,  272}, { -16,  -80,  16,  80}, false,  true},
        {{-256,  160}, { -32,  -32,  32,  32}, false,  true},
        {{-160,  160}, { -32,  -32,  32,  32}, false,  true},
        {{-304,   96}, { -16,  -32,  16,  32}, false,  true},
        -- west rooms
        {{-256,   48}, { -32,  -16,  32,  16}, false,  true},
        {{-176,   48}, { -16,  -16,  16,  16}, false,  true},
        {{-144,  -16}, { -16,  -80,  16,  80}, false,  true},
        {{-320,    0}, { -32,  -32,  32,  32}, false,  true},
        {{-288,  -96}, { -32,  -32,  32,  32}, false,  true},
        {{-240, -144}, { -16,  -16,  16,  16}, false, false},
        {{-144, -144}, { -48,  -16,  48,  16}, false, false},
        {{ 128, -144}, { -32,  -16,  32,  16}, false, false},
        -- south rooms
        {{-272, -192}, { -16,  -64,  16,  64}, false,  true},
        {{-112, -208}, { -16,  -48,  16,  48}, false,  true},
        {{-256, -288}, { -32,  -32,  32,  32}, false,  true},
        {{-192, -288}, { -32,  -32,  32,  32}, false, false},
        {{-128, -288}, { -32,  -32,  32,  32}, false,  true},
        {{ -64, -160}, { -32,  -32,  32,  32}, false,  true},
        {{ -48, -208}, { -16,  -16,  16,  16}, false,  true},
        -- walls
        {{ -96,  208}, { -32,  -16,  32,  16}, false,  true},
        {{ -48,  176}, { -16,  -16,  16,  16}, false,  true},
        {{ -96,  -64}, { -32,  -32,  32,  32}, false,  true},
        -- pillars
        {{ -80,  108}, { -16,  -20,  16,  20}, false,  true},
        {{ -48,   12}, { -16,  -20,  16,  20}, false,  true},
        {{-208,  -52}, { -16,  -20,  16,  20}, false,  true},
        {{ 208, -148}, { -16,  -20,  16,  20}, false, false},
    }) do
        local pos, bb, warp, mirror = table.unpack(t)
        local t = {pos = pos, collider = {type = Collider.AABB, bb = bb}}
        if warp then
            t.collider.flags = Collider.TRIGGER
        else
            t.collider.m = Math.INFINITY
            t.collider.flags = Collider.SOLID
        end
        local e = entity.load(nil, nil, t)
        table.insert(entities, e)
        if warp then table.insert(warps, e) end
        if mirror then
            t.pos[1] = -t.pos[1]
            table.insert(entities, entity.load(nil, nil, t))
        end
    end
    local cur_map = map.name()
    if cur_map == "fe1" then
        player.move_all(0, 288, false)
    elseif cur_map == "fe2" then
        player.move_all(-192, -224, false)
    elseif cur_map == "fe3" then
        player.move_all(-272, 240, true)
    else
        player.move_all(0, -380, true)
    end
end

local function on_collision(e0, e1)
    if e0 == warps[1] or e1 == warps[1] then
        map.next("maps/fe1.lua")
    elseif e0 == warps[2] or e1 == warps[2] then
        map.next("maps/fe2.lua")
    elseif e0 == warps[3] or e1 == warps[3] then
        map.next("maps/fe3.lua")
    elseif e0 == warps[4] or e1 == warps[4] then
        map.next("maps/main.lua")
    end
end

map.map {
    name = "fe0",
    file = "maps/fe0.lua",
    init = init,
    entities = entities,
    on_collision = on_collision,
    tiles = {
        "img/fire_emblem/21.png",
        32, 0, -16, 32, 32, 22, 23, {
             7, 22,   7, 23,   4, 26,   0, 30,   0, 30,   4, 26,   9, 24,   4, 26,   9, 24,   6, 23,   1, 22,  10, 31,   5, 23,   8, 24,   3, 24,   8, 23,   1, 31,  10, 31,   0, 30,   8, 22,   9, 22,   5, 23,
             2, 22,   3, 22,   4, 22,   4, 22,   4, 22,   0, 30,  10, 24,   4, 22,   4, 26,   0, 29,   8, 23,   1, 22,   5, 22,   9, 23,   0, 30,   0, 29,   6, 22,   3, 25,   4, 22,   0, 30,   5, 23,   0, 30,
            10, 23,   0, 22,   5, 28,   5, 28,   5, 28,   5, 28,   5, 28,   5, 28,   3, 23,   4, 26,   6, 23,   1, 22,  10, 25,   0, 30,   5, 28,  10, 28,   0, 27,   1, 27,  10, 28,   5, 27,   3, 23,   4, 23,
             7, 23,   5, 23,   8, 30,   2, 30,   2, 30,   2, 30,   2, 30,   3, 30,   6, 29,   9, 24,   6, 23,   8, 23,   9, 23,   5, 23,   8, 30,   1, 28,  10, 27,   1, 26,   1, 28,   7, 28,   6, 29,   6, 27,
             6, 27,   5, 23,   0, 23,  10, 27,   9, 28,   1, 23,  10, 27,   3, 31,   6, 29,   0, 30,   6, 23,   7, 25,   4, 23,   5, 23,   3, 31,  10, 27,   1, 26,   1, 26,   1, 26,   3, 31,   6, 29,   0, 30,
             0, 30,  10, 24,   0, 23,  10, 27,   1, 23,  10, 27,   1, 26,   3, 31,   6, 29,  10, 28,   2, 23,  10, 25,  10, 28,   3, 23,   3, 31,  10, 27,   1, 26,   0, 26,   0, 26,   3, 31,   6, 29,   4, 23,
             4, 26,   9, 24,   3, 31,   8, 28,   9, 28,   9, 28,   2, 27,   3, 31,   5, 27,   1, 28,   9, 31,  10, 25,   1, 28,   5, 27,   3, 31,   8, 28,   1, 26,   3, 26,   0, 26,   3, 31,   6, 29,   9, 24,
            10, 31,   6, 24,   5, 26,   6, 26,   7, 26,   8, 26,   9, 26,   7, 24,   9, 29,   9, 30,   9, 25,   7, 25,   1, 30,   9, 26,   7, 24,   6, 26,  10, 27,   2, 29,  10, 27,   3, 31,   6, 29,   8, 24,
            10, 25,   5, 28,   3, 31,  10, 27,   1, 26,   1, 26,   5, 25,   0, 24,   1, 24,   2, 24,   3, 24,   3, 24,   4, 24,   1, 24,   5, 24,   4, 25,  10, 27,   1, 26,   1, 26,   3, 31,   5, 27,   9, 31,
             7, 25,   6, 26,   9, 30,  10, 27,   3, 26,   0, 26,   2, 25,   5, 28,  10, 28,   0, 27,   8, 25,   8, 25,   1, 27,  10, 28,   5, 27,   0, 25,  10, 27,   3, 26,   0, 26,   1, 30,   6, 26,   9, 25,
             3, 25,   4, 25,   1, 26,   1, 26,   2, 29,  10, 27,   8, 30,   2, 30,   1, 28,  10, 27,   1, 26,   1, 26,   1, 26,   1, 28,   3, 27,   3, 30,  10, 27,   2, 29,  10, 27,   1, 26,   5, 25,   6, 25,
             5, 28,   0, 25,   1, 26,   1, 26,   1, 26,   1, 26,   3, 31,  10, 27,   1, 26,   3, 26,   0, 26,   0, 26,   3, 26,   0, 26,   1, 26,   1, 25,  10, 27,   1, 26,   1, 26,   1, 26,   2, 25,   5, 28,
             9, 29,   3, 30,   8, 28,   9, 28,   9, 28,   2, 27,   3, 31,  10, 27,   1, 26,   2, 29,  10, 27,   1, 26,   2, 29,  10, 27,   0, 26,   3, 31,   8, 28,   9, 28,   9, 28,   2, 27,   8, 30,   9, 29,
             4, 26,   5, 26,   9, 29,   6, 26,   7, 26,   8, 26,   9, 30,  10, 27,   1, 26,   0, 26,   1, 26,   0, 26,   1, 26,   0, 26,   1, 26,   1, 30,   6, 26,   7, 26,   8, 26,   9, 26,  10, 26,   6, 29,
             0, 30,   3, 31,  10, 27,   0, 26,   1, 26,   1, 26,   0, 26,   0, 26,   3, 26,   0, 26,   0, 26,   1, 26,   0, 26,   3, 26,   0, 26,   0, 26,   0, 26,   0, 26,   0, 26,   0, 26,   3, 31,   6, 29,
             2, 26,   3, 31,   8, 28,   9, 28,   2, 27,   9, 28,   2, 27,   0, 26,   2, 29,  10, 27,   0, 26,   1, 26,   1, 26,   2, 29,  10, 27,   9, 28,   2, 27,   2, 27,   9, 28,   2, 27,   3, 31,   6, 29,
             6, 27,   7, 27,   2, 28,   8, 27,   9, 27,   8, 27,   2, 28,  10, 27,   0, 26,   9, 28,   2, 27,   9, 28,   2, 27,   0, 26,   1, 26,   0, 28,   8, 27,   9, 27,   8, 27,   2, 28,   7, 27,   6, 29,
             5, 28,   6, 28,   2, 30,   1, 28,   4, 30,   1, 28,   7, 28,   8, 28,   9, 28,  10, 28,   0, 27,   1, 27,  10, 28,   8, 28,   2, 27,   8, 30,   1, 28,   4, 30,   1, 28,   3, 27,   4, 27,   5, 27,
             9, 29,   3, 31,   4, 30,   8, 31,   4, 29,   8, 31,   3, 31,  10, 29,   0, 28,   1, 28,   4, 30,   4, 29,   1, 28,   2, 28,   3, 28,   3, 31,   4, 30,   4, 29,   8, 31,   4, 29,   3, 31,   4, 28,
             1, 31,   3, 31,   4, 31,   7, 29,   8, 29,   4, 29,   3, 31,   8, 30,   2, 30,   9, 30,   4, 31,   8, 31,   1, 30,   2, 30,   3, 30,   3, 31,   4, 31,   8, 31,   4, 29,   8, 31,   3, 31,   6, 29,
             0, 29,   3, 31,   1, 29,   2, 29,   3, 29,   8, 31,   3, 31,   3, 31,   4, 30,   8, 31,   4, 29,   8, 31,   4, 29,   4, 29,   3, 31,   3, 31,   4, 30,   5, 29,   5, 29,   5, 29,   3, 31,   6, 29,
             0, 30,   1, 30,   2, 30,   2, 30,   3, 30,   4, 30,   3, 31,   3, 31,   4, 31,   5, 30,   6, 30,   6, 30,   7, 30,   8, 31,   3, 31,   3, 31,   4, 31,   8, 30,   2, 30,   2, 30,   9, 30,  10, 30,
             0, 31,   1, 31,   1, 31,   2, 31,   3, 31,   4, 31,   3, 31,   3, 31,   4, 31,   5, 31,   6, 31,   6, 31,   7, 31,   8, 31,   3, 31,   3, 31,   4, 31,   3, 31,   9, 31,   1, 31,   1, 31,  10, 31,
         },
     },
}
